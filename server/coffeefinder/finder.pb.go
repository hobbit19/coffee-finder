// Code generated by protoc-gen-go. DO NOT EDIT.
// source: finder.proto

package coffeefinder

import (
	"context"
	"fmt"
	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng                  float64  `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_02dfec63316bfb34, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type CoffeeShop struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rating               float32  `protobuf:"fixed32,2,opt,name=rating,proto3" json:"rating,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl              string   `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Location             *Point   `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoffeeShop) Reset()         { *m = CoffeeShop{} }
func (m *CoffeeShop) String() string { return proto.CompactTextString(m) }
func (*CoffeeShop) ProtoMessage()    {}
func (*CoffeeShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_02dfec63316bfb34, []int{1}
}

func (m *CoffeeShop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoffeeShop.Unmarshal(m, b)
}
func (m *CoffeeShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoffeeShop.Marshal(b, m, deterministic)
}
func (m *CoffeeShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoffeeShop.Merge(m, src)
}
func (m *CoffeeShop) XXX_Size() int {
	return xxx_messageInfo_CoffeeShop.Size(m)
}
func (m *CoffeeShop) XXX_DiscardUnknown() {
	xxx_messageInfo_CoffeeShop.DiscardUnknown(m)
}

var xxx_messageInfo_CoffeeShop proto.InternalMessageInfo

func (m *CoffeeShop) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CoffeeShop) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *CoffeeShop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoffeeShop) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *CoffeeShop) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CoffeeShop) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "coffeefinder.Point")
	proto.RegisterType((*CoffeeShop)(nil), "coffeefinder.CoffeeShop")
}

func init() { proto.RegisterFile("finder.proto", fileDescriptor_02dfec63316bfb34) }

var fileDescriptor_02dfec63316bfb34 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xe1, 0x4a, 0x03, 0x31,
	0x10, 0x84, 0xcd, 0xb5, 0xbd, 0xd6, 0x6d, 0x15, 0x59, 0x41, 0xa2, 0xbf, 0xca, 0xfd, 0x2a, 0x08,
	0xa7, 0xd4, 0x17, 0x10, 0x7c, 0x01, 0x3d, 0xf1, 0xb7, 0xc4, 0x4b, 0xae, 0x2e, 0xc4, 0x6c, 0xc9,
	0x45, 0x1f, 0xcb, 0x67, 0x94, 0x6e, 0x83, 0xa7, 0xd0, 0x7f, 0x33, 0x5f, 0x66, 0x20, 0xb3, 0xb0,
	0xe8, 0x28, 0x58, 0x17, 0xeb, 0x6d, 0xe4, 0xc4, 0xb8, 0x68, 0xb9, 0xeb, 0x9c, 0xdb, 0xb3, 0xea,
	0x1a, 0x26, 0x8f, 0x4c, 0x21, 0xe1, 0x19, 0x8c, 0xbc, 0x49, 0x5a, 0x2d, 0xd5, 0x4a, 0x35, 0x3b,
	0x29, 0x24, 0x6c, 0x74, 0x91, 0x49, 0xd8, 0x54, 0xdf, 0x0a, 0xe0, 0x41, 0xda, 0xcf, 0xef, 0xbc,
	0xc5, 0x53, 0x28, 0xc8, 0x4a, 0xe3, 0xb8, 0x29, 0xc8, 0xe2, 0x05, 0x94, 0xd1, 0x24, 0xca, 0x9d,
	0xa2, 0xc9, 0x0e, 0x11, 0xc6, 0xc1, 0x7c, 0x38, 0x3d, 0x92, 0xa4, 0x68, 0xbc, 0x84, 0x19, 0xb5,
	0x1c, 0x5e, 0x3f, 0xa3, 0xd7, 0x63, 0xe1, 0xd3, 0x9d, 0x7f, 0x89, 0x1e, 0x35, 0x4c, 0x8d, 0xb5,
	0xd1, 0xf5, 0xbd, 0x9e, 0xec, 0x5f, 0xb2, 0xc5, 0x1b, 0x98, 0x79, 0x6e, 0x4d, 0x22, 0x0e, 0xba,
	0x5c, 0xaa, 0xd5, 0x7c, 0x7d, 0x5e, 0xff, 0x5d, 0x53, 0xcb, 0x94, 0xe6, 0x37, 0xb4, 0x7e, 0x82,
	0x93, 0xfc, 0x5f, 0x17, 0xbf, 0xa8, 0x75, 0x78, 0x0f, 0xf3, 0x61, 0x40, 0x8f, 0x87, 0xea, 0x57,
	0xfa, 0x3f, 0x1c, 0xf2, 0xd5, 0xd1, 0xad, 0x7a, 0x2b, 0xe5, 0x8a, 0x77, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xfa, 0x1a, 0x05, 0x8e, 0x55, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoffeeServiceClient is the client API for CoffeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoffeeServiceClient interface {
	CoffeeShops(ctx context.Context, in *Point, opts ...grpc.CallOption) (CoffeeService_CoffeeShopsClient, error)
}

type coffeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoffeeServiceClient(cc *grpc.ClientConn) CoffeeServiceClient {
	return &coffeeServiceClient{cc}
}

func (c *coffeeServiceClient) CoffeeShops(ctx context.Context, in *Point, opts ...grpc.CallOption) (CoffeeService_CoffeeShopsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoffeeService_serviceDesc.Streams[0], "/coffeefinder.CoffeeService/CoffeeShops", opts...)
	if err != nil {
		return nil, err
	}
	x := &coffeeServiceCoffeeShopsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoffeeService_CoffeeShopsClient interface {
	Recv() (*CoffeeShop, error)
	grpc.ClientStream
}

type coffeeServiceCoffeeShopsClient struct {
	grpc.ClientStream
}

func (x *coffeeServiceCoffeeShopsClient) Recv() (*CoffeeShop, error) {
	m := new(CoffeeShop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoffeeServiceServer is the server API for CoffeeService service.
type CoffeeServiceServer interface {
	CoffeeShops(*Point, CoffeeService_CoffeeShopsServer) error
}

func RegisterCoffeeServiceServer(s *grpc.Server, srv CoffeeServiceServer) {
	s.RegisterService(&_CoffeeService_serviceDesc, srv)
}

func _CoffeeService_CoffeeShops_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoffeeServiceServer).CoffeeShops(m, &coffeeServiceCoffeeShopsServer{stream})
}

type CoffeeService_CoffeeShopsServer interface {
	Send(*CoffeeShop) error
	grpc.ServerStream
}

type coffeeServiceCoffeeShopsServer struct {
	grpc.ServerStream
}

func (x *coffeeServiceCoffeeShopsServer) Send(m *CoffeeShop) error {
	return x.ServerStream.SendMsg(m)
}

var _CoffeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coffeefinder.CoffeeService",
	HandlerType: (*CoffeeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CoffeeShops",
			Handler:       _CoffeeService_CoffeeShops_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "finder.proto",
}
